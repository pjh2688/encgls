package com.enc.business.admin;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UrlPathHelper;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.enc.aop.AdminLoginAspect;
import com.enc.config.CODESET;
import com.enc.config.MemberSession;
import com.enc.config.SolutionConfig;
import com.typhoon.framework.HttpServletResponseUtil;
import com.typhoon.framework.STRINGUtil;
import com.typhoon.framework.aop.RESPONSE_TYPE;
import com.typhoon.framework.file.FileDownloader;
import com.typhoon.framework.file.FileUploader;
import com.typhoon.framework.json.JSONResMessage;
import com.typhoon.framework.json.JSONUtil;

@Controller
@RequestMapping({"/admin/02"})
public class ADM02Controller {
	private final org.slf4j.Logger LOGGER 			= org.slf4j.LoggerFactory.getLogger("TYPHOON_LOG");
	
	public static String FILE_SUB_DIR_BBS 			= "/BBS";
	
	public static String FILE_SUB_DIR_FAQ 			= "/FAQ";
	
	public static String FILE_SUB_DIR_QNA 			= "/QNA";
	
	@Autowired
    private SolutionConfig solutionConfig;
	
	@Autowired
	private ADM02Service aDM02Service;
	
    /**
     * 관리자/게시판관리/공지사항
     * 
     * @return
     */
    @GetMapping({"", "/", "/index", "/01"})
    @AdminLoginAspect(resType = RESPONSE_TYPE.MOVE)
	public ModelAndView adm_01(HttpServletRequest request) {
    	ModelAndView mv = new ModelAndView("/admin/02/01");
		return mv;
	}
    
    /**
     * 관리자/게시판관리/FAQ
     * 
     * @return
     */
    @GetMapping({"/01PW", "/02", "/02PW", "/03", "/03PW"})
    @AdminLoginAspect(resType = RESPONSE_TYPE.MOVE)
	public ModelAndView adm_02(HttpServletRequest request) {
    	String path 	= (new UrlPathHelper()).getPathWithinApplication(request);
    	ModelAndView mv = new ModelAndView(path);
		return mv;
	}
    
	/**
	 * 추가
	 * 
	 * @param request
	 * @param paramJson
	 * @return
	 * @throws Exception
	 */
	@PostMapping("/01AW")
	@AdminLoginAspect
	public @ResponseBody JSON adm_01AW(HttpServletRequest request, HttpServletResponse response) throws Exception {
		JSONObject paramJson 		= JSONUtil.makeJSONObjectFromRequest(request);
		paramJson.put("doc_type", CODESET.DOC_TYPE_HTML);
		paramJson.put("hit_viewer", 1);
		paramJson.put("writer_ip", (request.getHeader("X-FORWARDED-FOR") != null)? request.getHeader("X-FORWARDED-FOR") : request.getRemoteAddr());
		paramJson.put("readip", paramJson.getString("writer_ip"));
		paramJson.put("adminid", MemberSession.getMemberId(request));
		
		JSONResMessage resJson 		= null;
		
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		
		try {
			String uuid 			= System.currentTimeMillis() + "";
			new FileUploader(this.solutionConfig, paramJson) {
				@Override
				protected String getSaveWebDirRootPath() {
					return FILE_SUB_DIR_BBS;
				}
				
				@Override
				protected String[] getDeleteImageFiles() {
					return null;
				}
				
				@Override
				protected String[] getOldImageFiles() {
					return null;
				}
				
				@Override
				protected String[] getImageFiles() {
					return new String[] {"file"};
				}
				
				@Override
				protected String[] getDbFieldes() {
					return new String[] {"file_name"};
				}

				@Override
				protected String[] getDbOriFieldes() {
					return new String[] {"file_original_name"};
				}
			}.upload(multipartRequest, response, uuid);
			
			resJson 				= this.aDM02Service.adm_01AW(paramJson);
		} catch(Exception e) {
			LOGGER.error("adm_01AW", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	

	/**
	 * 수정
	 * 
	 * @param request
	 * @param paramJson
	 * @return
	 * @throws Exception
	 */
	@PostMapping("/01AE")
	@AdminLoginAspect
	public @ResponseBody JSON adm_01AE(HttpServletRequest request, HttpServletResponse response) throws Exception {
		JSONObject paramJson 		= JSONUtil.makeJSONObjectFromRequest(request);
		paramJson.put("doc_type", CODESET.DOC_TYPE_HTML);
		paramJson.put("writer_ip", (request.getHeader("X-FORWARDED-FOR") != null)? request.getHeader("X-FORWARDED-FOR") : request.getRemoteAddr());
		paramJson.put("adminid", MemberSession.getMemberId(request));
		
		JSONResMessage resJson 		= null;
		
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		
		try {
			String uuid 			= System.currentTimeMillis() + "";
			new FileUploader(this.solutionConfig, paramJson) {
				@Override
				protected String getSaveWebDirRootPath() {
					return FILE_SUB_DIR_BBS;
				}
				
				@Override
				protected String[] getDeleteImageFiles() {
					return new String[] {"del_file"};
				}
				
				@Override
				protected String[] getOldImageFiles() {
					return new String[] {"old_file"};
				}
				
				@Override
				protected String[] getImageFiles() {
					return new String[] {"file"};
				}
				
				@Override
				protected String[] getDbFieldes() {
					return new String[] {"file_name"};
				}

				@Override
				protected String[] getDbOriFieldes() {
					return new String[] {"file_original_name"};
				}
			}.upload(multipartRequest, response, uuid);
			
			resJson 				= this.aDM02Service.adm_01AE(paramJson);
		} catch(Exception e) {
			LOGGER.error("adm_01AE", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	
	
	@PostMapping("/01AL")
	@AdminLoginAspect
	public @ResponseBody JSON adm_01AL(HttpServletRequest request, @RequestBody JSONObject paramJson) throws Exception {
		JSONResMessage resJson 		= null;
		try {
			resJson 				= this.aDM02Service.adm_01AL(paramJson);
		} catch(Exception e) {
			LOGGER.error("adm_01AL", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	
	@PostMapping("/01PA")
	@AdminLoginAspect(resType = RESPONSE_TYPE.MOVE)
	public ModelAndView adm_01PA(HttpServletRequest request, @RequestBody JSONObject paramJson) throws Exception {
		ModelAndView mv 			= new ModelAndView("/admin/02/01PA");
		JSONObject bean 			= null;
		try {
			bean 					= this.aDM02Service.adm_01PA(paramJson, (request.getHeader("X-FORWARDED-FOR") != null)? request.getHeader("X-FORWARDED-FOR") : request.getRemoteAddr());
			mv.addObject("bean", bean);
		} catch(Exception e) {
			LOGGER.error("adm_01PA", e);
		}
		
		return mv;
	}
	
	/**
	 * 글 수정 페이지 요청
	 * 
	 * @param request
	 * @param paramJson
	 * @return
	 * @throws Exception
	 */
	@GetMapping("/01PE")
	@AdminLoginAspect(resType = RESPONSE_TYPE.MOVE)
	public ModelAndView adm_01PE(HttpServletRequest request, HttpServletResponse response, @RequestParam(value="bbs_noticeuid", required=false, defaultValue="0") String bbs_noticeuidT) throws Exception {
		int bbs_noticeuid 				= STRINGUtil.getParam(bbs_noticeuidT, 0);
		if (bbs_noticeuid <= 0) {
			response.setContentType("text/html; charset=UTF-8");
			PrintWriter out 			= response.getWriter();
			out.println(HttpServletResponseUtil.getAlertMessageBack("게시글번호가 존재하지않습니다"));
			return null;
		} else {
			ModelAndView mv 			= new ModelAndView("/admin/02/01PE");
			JSONObject bean 			= null;
			try {
				bean 					= this.aDM02Service.adm_01PE(bbs_noticeuid);
				mv.addObject("bean", bean);
			} catch(Exception e) {
				LOGGER.error("adm_01PA", e);
			}
			
			return mv;
		}
	}
	
	
	
	@PostMapping("/01AD")
	@AdminLoginAspect
	public @ResponseBody JSON adm_01AD(HttpServletRequest request, @RequestBody JSONObject paramJson) throws Exception {
		JSONResMessage resJson 		= null;
		try {
			resJson 				= this.aDM02Service.adm_01AD(paramJson, MemberSession.getMemberId(request));
		} catch(Exception e) {
			LOGGER.error("adm_01AL", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	
	@RequestMapping("/01FD")
	@AdminLoginAspect
	public void test_dn_file(HttpServletRequest request, HttpServletResponse response) throws Exception {
		JSONObject paramJson 	= JSONUtil.makeJSONObjectFromRequest(request);
		
		String downloadName 	= paramJson.getString("original");
		String webFilePath 		= paramJson.getString("filepath");
		String realDirPath 		= solutionConfig.getUploaddir(); //request.getSession().getServletContext().getRealPath("/");
		//System.out.println("realFilePath:" + realDirPath);
		File dir 				= new File(realDirPath, FILE_SUB_DIR_BBS);
		File file 				= new File(dir, webFilePath);
		//System.out.println("file:" + file.getAbsolutePath());
		try {
			FileDownloader.download(request, response, file, downloadName);
		} catch(FileNotFoundException e) {
			HttpServletResponseUtil.writeLayerAlertMessage(response, "요청하신 파일은 존재하지않습니다");
		} catch(Exception e) {
			HttpServletResponseUtil.writeLayerAlertMessage(response, "전송중 기타 오류 발생");
		}
	}
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	@PostMapping("/02AL")
	@AdminLoginAspect
	public @ResponseBody JSON adm_02AL(HttpServletRequest request, @RequestBody JSONObject paramJson) throws Exception {
		JSONResMessage resJson 		= null;
		try {
			resJson 				= this.aDM02Service.adm_02AL(paramJson);
		} catch(Exception e) {
			LOGGER.error("adm_01AL", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	

	/**
	 * 추가
	 * 
	 * @param request
	 * @param paramJson
	 * @return
	 * @throws Exception
	 */
	@PostMapping("/02AW")
	@AdminLoginAspect
	public @ResponseBody JSON adm_02AW(HttpServletRequest request, HttpServletResponse response) throws Exception {
		JSONObject paramJson 		= JSONUtil.makeJSONObjectFromRequest(request);
		paramJson.put("doc_type", CODESET.DOC_TYPE_HTML);
		paramJson.put("hit_viewer", 1);
		paramJson.put("writer_ip", (request.getHeader("X-FORWARDED-FOR") != null)? request.getHeader("X-FORWARDED-FOR") : request.getRemoteAddr());
		paramJson.put("readip", paramJson.getString("writer_ip"));
		paramJson.put("adminid", MemberSession.getMemberId(request));
		
		JSONResMessage resJson 		= null;
		
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		
		try {
			String uuid 			= System.currentTimeMillis() + "";
			new FileUploader(this.solutionConfig, paramJson) {
				@Override
				protected String getSaveWebDirRootPath() {
					return FILE_SUB_DIR_FAQ;
				}
				
				@Override
				protected String[] getDeleteImageFiles() {
					return null;
				}
				
				@Override
				protected String[] getOldImageFiles() {
					return null;
				}
				
				@Override
				protected String[] getImageFiles() {
					return new String[] {"file"};
				}
				
				@Override
				protected String[] getDbFieldes() {
					return new String[] {"file_name"};
				}

				@Override
				protected String[] getDbOriFieldes() {
					return new String[] {"file_original_name"};
				}
			}.upload(multipartRequest, response, uuid);
			
			resJson 				= this.aDM02Service.adm_02AW(paramJson);
		} catch(Exception e) {
			LOGGER.error("adm_02AW", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	

	/**
	 * FAQ 수정
	 * 
	 * @param request
	 * @param paramJson
	 * @return
	 * @throws Exception
	 */
	@PostMapping("/02AE")
	@AdminLoginAspect
	public @ResponseBody JSON adm_02AE(HttpServletRequest request, HttpServletResponse response) throws Exception {
		JSONObject paramJson 		= JSONUtil.makeJSONObjectFromRequest(request);
		paramJson.put("doc_type", CODESET.DOC_TYPE_HTML);
		paramJson.put("writer_ip", (request.getHeader("X-FORWARDED-FOR") != null)? request.getHeader("X-FORWARDED-FOR") : request.getRemoteAddr());
		paramJson.put("adminid", MemberSession.getMemberId(request));
		
		JSONResMessage resJson 		= null;
		
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		
		try {
			String uuid 			= System.currentTimeMillis() + "";
			new FileUploader(this.solutionConfig, paramJson) {
				@Override
				protected String getSaveWebDirRootPath() {
					return FILE_SUB_DIR_FAQ;
				}
				
				@Override
				protected String[] getDeleteImageFiles() {
					return new String[] {"del_file"};
				}
				
				@Override
				protected String[] getOldImageFiles() {
					return new String[] {"old_file"};
				}
				
				@Override
				protected String[] getImageFiles() {
					return new String[] {"file"};
				}
				
				@Override
				protected String[] getDbFieldes() {
					return new String[] {"file_name"};
				}

				@Override
				protected String[] getDbOriFieldes() {
					return new String[] {"file_original_name"};
				}
			}.upload(multipartRequest, response, uuid);
			
			resJson 				= this.aDM02Service.adm_02AE(paramJson);
		} catch(Exception e) {
			LOGGER.error("adm_02AE", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	
	/**
	 * FAQ 글 수정 페이지 요청
	 * 
	 * @param request
	 * @param paramJson
	 * @return
	 * @throws Exception
	 */
	@GetMapping("/02PE")
	@AdminLoginAspect(resType = RESPONSE_TYPE.MOVE)
	public ModelAndView adm_02PE(HttpServletRequest request, HttpServletResponse response, @RequestParam(value="bbs_faquid", required=false, defaultValue="0") String bbs_faquidT) throws Exception {
		int bbs_faquid 					= STRINGUtil.getParam(bbs_faquidT, 0);
		if (bbs_faquid <= 0) {
			response.setContentType("text/html; charset=UTF-8");
			PrintWriter out 			= response.getWriter();
			out.println(HttpServletResponseUtil.getAlertMessageBack("게시글번호가 존재하지않습니다"));
			return null;
		} else {
			ModelAndView mv 			= new ModelAndView("/admin/02/02PE");
			JSONObject bean 			= null;
			try {
				bean 					= this.aDM02Service.adm_02PE(bbs_faquid);
				mv.addObject("bean", bean);
			} catch(Exception e) {
				LOGGER.error("adm_01PA", e);
			}
			
			return mv;
		}
	}
	
	@PostMapping("/02PA")
	@AdminLoginAspect(resType = RESPONSE_TYPE.MOVE)
	public ModelAndView adm_02PA(HttpServletRequest request, @RequestBody JSONObject paramJson) throws Exception {
		ModelAndView mv 			= new ModelAndView("/admin/02/02PA");
		JSONObject bean 			= null;
		try {
			bean 					= this.aDM02Service.adm_02PA(paramJson, (request.getHeader("X-FORWARDED-FOR") != null)? request.getHeader("X-FORWARDED-FOR") : request.getRemoteAddr());
			mv.addObject("bean", bean);
		} catch(Exception e) {
			LOGGER.error("adm_02PA", e);
		}
		
		return mv;
	}

	@PostMapping("/02AD")
	@AdminLoginAspect
	public @ResponseBody JSON adm_02AD(HttpServletRequest request, @RequestBody JSONObject paramJson) throws Exception {
		JSONResMessage resJson 		= null;
		try {
			resJson 				= this.aDM02Service.adm_02AD(paramJson, MemberSession.getMemberId(request));
		} catch(Exception e) {
			LOGGER.error("adm_01AL", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	
	@RequestMapping("/02FD")
	@AdminLoginAspect
	public void dn_02FD(HttpServletRequest request, HttpServletResponse response) throws Exception {
		JSONObject paramJson 	= JSONUtil.makeJSONObjectFromRequest(request);
		
		String downloadName 	= paramJson.getString("original");
		String webFilePath 		= paramJson.getString("filepath");
		String realDirPath 		= solutionConfig.getUploaddir(); //request.getSession().getServletContext().getRealPath("/");
		//System.out.println("realFilePath:" + realDirPath);
		File dir 				= new File(realDirPath, FILE_SUB_DIR_FAQ);
		File file 				= new File(dir, webFilePath);
		//System.out.println("file:" + file.getAbsolutePath());
		try {
			FileDownloader.download(request, response, file, downloadName);
		} catch(FileNotFoundException e) {
			HttpServletResponseUtil.writeLayerAlertMessage(response, "요청하신 파일은 존재하지않습니다");
		} catch(Exception e) {
			HttpServletResponseUtil.writeLayerAlertMessage(response, "전송중 기타 오류 발생");
		}
	}
	
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	@PostMapping("/03AL")
	@AdminLoginAspect
	public @ResponseBody JSON adm_03AL(HttpServletRequest request, @RequestBody JSONObject paramJson) throws Exception {
		JSONResMessage resJson 		= null;
		try {
			resJson 				= this.aDM02Service.adm_03AL(paramJson);
		} catch(Exception e) {
			LOGGER.error("adm_03AL", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	

	/**
	 * 문의하기 추가
	 * 
	 * @param request
	 * @param paramJson
	 * @return
	 * @throws Exception
	 */
	@PostMapping("/03AW")
	@AdminLoginAspect
	public @ResponseBody JSON adm_03AW(HttpServletRequest request, HttpServletResponse response) throws Exception {
		JSONObject paramJson 		= JSONUtil.makeJSONObjectFromRequest(request);
		paramJson.put("doc_type", CODESET.DOC_TYPE_HTML);
		paramJson.put("hit_viewer", 1);
		paramJson.put("writer_ip", (request.getHeader("X-FORWARDED-FOR") != null)? request.getHeader("X-FORWARDED-FOR") : request.getRemoteAddr());
		paramJson.put("readip", paramJson.getString("writer_ip"));
		if (!paramJson.containsKey("secuyn")) {
			paramJson.put("secuyn", "N");
		}
		
		JSONResMessage resJson 		= null;
		
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		
		try {
			String uuid 			= System.currentTimeMillis() + "";
			new FileUploader(this.solutionConfig, paramJson) {
				@Override
				protected String getSaveWebDirRootPath() {
					return FILE_SUB_DIR_QNA;
				}
				
				@Override
				protected String[] getDeleteImageFiles() {
					return null;
				}
				
				@Override
				protected String[] getOldImageFiles() {
					return null;
				}
				
				@Override
				protected String[] getImageFiles() {
					return new String[] {"file"};
				}
				
				@Override
				protected String[] getDbFieldes() {
					return new String[] {"file_name"};
				}

				@Override
				protected String[] getDbOriFieldes() {
					return new String[] {"file_original_name"};
				}
			}.upload(multipartRequest, response, uuid);
			
			resJson 				= this.aDM02Service.adm_03AW(paramJson);
		} catch(Exception e) {
			LOGGER.error("adm_01AW", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	

	@PostMapping("/03PA")
	@AdminLoginAspect(resType = RESPONSE_TYPE.MOVE)
	public ModelAndView adm_03PA(HttpServletRequest request, @RequestBody JSONObject paramJson) throws Exception {
		ModelAndView mv 			= new ModelAndView("/admin/02/03PA");
		JSONObject bean 			= null;
		try {
			bean 					= this.aDM02Service.adm_03PA(paramJson, (request.getHeader("X-FORWARDED-FOR") != null)? request.getHeader("X-FORWARDED-FOR") : request.getRemoteAddr());
			mv.addObject("bean", bean);
		} catch(Exception e) {
			LOGGER.error("adm_03PA", e);
		}
		
		return mv;
	}
	
	@PostMapping("/03AD")
	@AdminLoginAspect
	public @ResponseBody JSON adm_03AD(HttpServletRequest request, @RequestBody JSONObject paramJson) throws Exception {
		JSONResMessage resJson 		= null;
		try {
			resJson 				= this.aDM02Service.adm_03AD(paramJson, MemberSession.isAdmin(request));
		} catch(Exception e) {
			LOGGER.error("adm_03AD", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	
	@RequestMapping("/03FD")
	@AdminLoginAspect
	public void dn_03FD(HttpServletRequest request, HttpServletResponse response) throws Exception {
		JSONObject paramJson 	= JSONUtil.makeJSONObjectFromRequest(request);
		
		String downloadName 	= paramJson.getString("original");
		String webFilePath 		= paramJson.getString("filepath");
		String realDirPath 		= solutionConfig.getUploaddir(); //request.getSession().getServletContext().getRealPath("/");
		//System.out.println("realFilePath:" + realDirPath);
		File dir 				= new File(realDirPath, FILE_SUB_DIR_QNA);
		File file 				= new File(dir, webFilePath);
		System.out.println("file:" + file.getAbsolutePath());
		try {
			FileDownloader.download(request, response, file, downloadName);
		} catch(FileNotFoundException e) {
			HttpServletResponseUtil.writeLayerAlertMessage(response, "요청하신 파일은 존재하지않습니다");
		} catch(Exception e) {
			HttpServletResponseUtil.writeLayerAlertMessage(response, "전송중 기타 오류 발생");
		}
	}
	

	/**
	 * 글 수정 페이지 요청
	 * 
	 * @param request
	 * @param paramJson
	 * @return
	 * @throws Exception
	 */
	@GetMapping("/03PE")
	@AdminLoginAspect(resType = RESPONSE_TYPE.MOVE)
	public ModelAndView adm_03PE(HttpServletRequest request, HttpServletResponse response, @RequestParam(value="bbs_qnauid", required=false, defaultValue="0") String bbs_qnauidT) throws Exception {
		int bbs_qnauid 				= STRINGUtil.getParam(bbs_qnauidT, 0);
		if (bbs_qnauid <= 0) {
			response.setContentType("text/html; charset=UTF-8");
			PrintWriter out 			= response.getWriter();
			out.println(HttpServletResponseUtil.getAlertMessageBack("게시글번호가 존재하지않습니다"));
			return null;
		} else {
			ModelAndView mv 			= new ModelAndView("/admin/02/03PE");
			JSONObject bean 			= null;
			try {
				bean 					= this.aDM02Service.adm_03PE(bbs_qnauid);
				mv.addObject("bean", bean);
			} catch(Exception e) {
				LOGGER.error("adm_03PE", e);
			}
			
			return mv;
		}
	}
	

	/**
	 * 문의하기 수정
	 * 
	 * @param request
	 * @param paramJson
	 * @return
	 * @throws Exception
	 */
	@PostMapping("/03AE")
	@AdminLoginAspect
	public @ResponseBody JSON adm_03AE(HttpServletRequest request, HttpServletResponse response) throws Exception {
		JSONObject paramJson 		= JSONUtil.makeJSONObjectFromRequest(request);
		paramJson.put("doc_type", CODESET.DOC_TYPE_HTML);
		paramJson.put("writer_ip", (request.getHeader("X-FORWARDED-FOR") != null)? request.getHeader("X-FORWARDED-FOR") : request.getRemoteAddr());
		if (!paramJson.containsKey("secuyn")) {
			paramJson.put("secuyn", "N");
		}
		
		JSONResMessage resJson 		= null;
		
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		
		try {
			String uuid 			= System.currentTimeMillis() + "";
			new FileUploader(this.solutionConfig, paramJson) {
				@Override
				protected String getSaveWebDirRootPath() {
					return FILE_SUB_DIR_QNA;
				}
				
				@Override
				protected String[] getDeleteImageFiles() {
					return new String[] {"del_file"};
				}
				
				@Override
				protected String[] getOldImageFiles() {
					return new String[] {"old_file"};
				}
				
				@Override
				protected String[] getImageFiles() {
					return new String[] {"file"};
				}
				
				@Override
				protected String[] getDbFieldes() {
					return new String[] {"file_name"};
				}

				@Override
				protected String[] getDbOriFieldes() {
					return new String[] {"file_original_name"};
				}
			}.upload(multipartRequest, response, uuid);
			
			resJson 				= this.aDM02Service.adm_03AE(paramJson);
		} catch(Exception e) {
			LOGGER.error("adm_03AE", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	

	/**
	 * 문의하기 답글 추가
	 * 
	 * @param request
	 * @param paramJson
	 * @return
	 * @throws Exception
	 */
	@PostMapping("/03AR")
	@AdminLoginAspect
	public @ResponseBody JSON adm_03AR(HttpServletRequest request, HttpServletResponse response) throws Exception {
		JSONObject paramJson 		= JSONUtil.makeJSONObjectFromRequest(request);
		paramJson.put("doc_type", CODESET.DOC_TYPE_HTML);
		paramJson.put("adminid", MemberSession.getMemberId(request));
		
		JSONResMessage resJson 		= null;
		
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		
		try {
			String uuid 			= System.currentTimeMillis() + "";
			new FileUploader(this.solutionConfig, paramJson) {
				@Override
				protected String getSaveWebDirRootPath() {
					return FILE_SUB_DIR_QNA;
				}
				
				@Override
				protected String[] getDeleteImageFiles() {
					return null;
				}
				
				@Override
				protected String[] getOldImageFiles() {
					return null;
				}
				
				@Override
				protected String[] getImageFiles() {
					return new String[] {"file"};
				}
				
				@Override
				protected String[] getDbFieldes() {
					return new String[] {"file_name"};
				}

				@Override
				protected String[] getDbOriFieldes() {
					return new String[] {"file_original_name"};
				}
			}.upload(multipartRequest, response, uuid);
			
			resJson 				= this.aDM02Service.adm_03AR(paramJson);
		} catch(Exception e) {
			LOGGER.error("adm_03AR", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	
	@PostMapping("/03PR")
	@AdminLoginAspect(resType = RESPONSE_TYPE.MOVE)
	public ModelAndView adm_03PR(HttpServletRequest request, @RequestBody JSONObject paramJson) throws Exception {
		ModelAndView mv 			= new ModelAndView("/admin/02/03PR");
		JSONArray list 				= null;
		try {
			list 					= this.aDM02Service.adm_03PR(paramJson);
			mv.addObject("list", list);
		} catch(Exception e) {
			LOGGER.error("adm_03PR", e);
		}
		
		return mv;
	}
	
	@PostMapping("/03ARD")
	@AdminLoginAspect
	public @ResponseBody JSON adm_03ARD(HttpServletRequest request, @RequestBody JSONObject paramJson) throws Exception {
		JSONResMessage resJson 		= null;
		try {
			resJson 				= this.aDM02Service.adm_03ARD(paramJson, MemberSession.getMemberId(request));
		} catch(Exception e) {
			LOGGER.error("adm_03ARD", e);
			resJson 				= new JSONResMessage(JSONResMessage.FAIL, "요청작업 처리중 오류가 발생했습니다");
		}
		
		return resJson.getResponseMessage();
	}
	
}
