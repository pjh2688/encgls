package com.enc.batch;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

public class VMManageExt extends KTAPICommon {
	public VMManageExt() {
		
	}
	
	/**
	 * std_cent 7.6 64bit en_2x2
	 * 
	 * @param templateName
	 * @throws Exception
	 */
	public KTAProtocol makeVmByTemplateCentOs76_2x2(String templateName, String hostName, boolean isDmz, String base64EncodedUserdata) throws Exception {
		return makeVmByTemplate(templateName, "4564364d-0bf7-415c-8779-b92f08c3e075", hostName, isDmz, base64EncodedUserdata);
	}
	
	/**
	 * std_cent 7.6 64bit en_2x4
	 * 
	 * @param templateName
	 * @throws Exception
	 */
	public KTAProtocol makeVmByTemplateCentOs76_2x4(String templateName, String hostName, boolean isDmz, String base64EncodedUserdata) throws Exception {
		return makeVmByTemplate(templateName, "919c59cf-fe26-497c-b37c-c5edf4cb53f9", hostName, isDmz, base64EncodedUserdata);
	}
	
	/**
	 * std_cent 7.6 64bit en_4x8
	 * 
	 * @param templateName
	 * @throws Exception
	 */
	public KTAProtocol makeVmByTemplateCentOs76_4x8(String templateName, String hostName, boolean isDmz, String base64EncodedUserdata) throws Exception {
		return makeVmByTemplate(templateName, "919c59cf-fe26-497c-b37c-c5edf4cb53f9", hostName, isDmz, base64EncodedUserdata);
	}
	
	/**
	 * std_cent 7.6 64bit en_4x16
	 * 
	 * @param templateName
	 * @throws Exception
	 */
	public KTAProtocol makeVmByTemplateCentOs76_4x16(String templateName, String hostName, boolean isDmz, String base64EncodedUserdata) throws Exception {
		return makeVmByTemplate(templateName, "919c59cf-fe26-497c-b37c-c5edf4cb53f9", hostName, isDmz, base64EncodedUserdata);
	}
	
	/**
	 * std_cent 7.6 64bit en_8x36
	 * 
	 * @param templateName
	 * @throws Exception
	 */
	public KTAProtocol makeVmByTemplateCentOs76_8x32(String templateName, String hostName, boolean isDmz, String base64EncodedUserdata) throws Exception {
		return makeVmByTemplate(templateName, "919c59cf-fe26-497c-b37c-c5edf4cb53f9", hostName, isDmz, base64EncodedUserdata);
	}
	
	/**
	 * std_cent 7.6 64bit en_16x32
	 * 
	 * @param templateName
	 * @throws Exception
	 */
	public KTAProtocol makeVmByTemplateCentOs76_16x32(String templateName, String hostName, boolean isDmz, String base64EncodedUserdata) throws Exception {
		return makeVmByTemplate(templateName, "919c59cf-fe26-497c-b37c-c5edf4cb53f9", hostName, isDmz, base64EncodedUserdata);
	}
	
	
	/**
	 * 템블릿을 기반으로 VM 생성
	 * 
	 * ServiceOfferingId : VM 인스턴스에게 허용할 CPU 성능, 메모리 크기 등을 분류한 숫자 아이디
	 * DiskOfferingId : VM 인스턴스를 만들때 사용할 루트 볼륨의 디스크 오퍼링 아이디.
	 * 
	 * @param templateName
	 * @param isDmz
	 * @param hostName
	 * @param serviceofferingid
	 * @param base64EncodedUserdata
	 * @return
	 * @throws Exception
	 */
	public KTAProtocol makeVmByTemplate(String templateName, String serviceofferingid, String hostName, boolean isDmz, String base64EncodedUserdata) throws Exception {
		JSONObject templateJson 	= getJSONObjectByTemplateName(listVmTemplate(), templateName);
		
		if (templateJson == null) {
			throw new Exception("요청한 템플릿이 존재하지않음");
		} else {
			JSONObject networkIds 	= getNetworkIds();
			if (networkIds == null) {
				throw new Exception("네트워크 정보가 존재하지 않음");
			} else {
				String usageplantypeParam 	= "&usageplantype=hourly"; // 시간당:hourly(기본값), 월단위:monthly
				String networkZoneParam 	= "&networkids=" + ((isDmz)? networkIds.getString("dmz") : networkIds.getString("private"));
				String userdataParam 		= (base64EncodedUserdata == null || base64EncodedUserdata.trim().length() <= 0)? "" : "&userdata=" + base64EncodedUserdata;
				
				StringBuilder buffer 		= new StringBuilder();
				buffer.append("command=deployVirtualMachine");
				buffer.append("&serviceofferingid=" + serviceofferingid);
				buffer.append("&templateid=" + templateJson.getString("id"));
				buffer.append("&zoneid=" + templateJson.getString("zoneid"));
				buffer.append(networkZoneParam);
				buffer.append("&name=" + hostName);
				buffer.append("&displayname=" + hostName);
				buffer.append(usageplantypeParam);
				buffer.append(userdataParam);
				buffer.append("&response=json");
				
				String requestFullAddress 	= make(SERVER_URLADDR, buffer.toString());
				String deployJson 			= prettyPrinterForJson(getAPIInfo(requestFullAddress));
				
				return new KTAProtocol("deployVirtualMachine", buffer.toString(), requestFullAddress, deployJson);
			}
		}
	}
	
	/**
	 * VM을 생성요청후 jobid를 반환
	 * 
	 * @param jsonTxt
	 * @return
	 * @throws Exception
	 */
	public String getJobIdAfterDeployVirtualMachine(String jsonTxt) throws Exception {
		if (jsonTxt == null) {
			return null;
		} else {
			JSONObject resJson 			= JSONObject.parseObject(jsonTxt).getJSONObject("deployvirtualmachineresponse");
			
			return resJson.getString("jobid");
		}
	}
	
	/**
	 * VM 생성/정지 결과에 대한 Asynch 결과를 반환한다
	 * 
	 * @param jobid
	 * @return
	 * @throws Exception
	 */
	public KTAProtocol getVmQueryAsyncJobResult(String jobid) throws Exception {
		StringBuilder buffer 		= new StringBuilder();
		buffer.append("command=queryAsyncJobResult");
		buffer.append("&jobid=" + jobid);
		buffer.append("&response=json");
		
		String requestFullAddress 	= make(SERVER_URLADDR, buffer.toString());
		String deployJson 			= prettyPrinterForJson(getAPIInfo(requestFullAddress));
		
		return new KTAProtocol("queryAsyncJobResult", buffer.toString(), requestFullAddress, deployJson);
	}
	

	/**
	 * VM을 정지
	 * 
	 * @param vmId
	 * @return
	 * @throws Exception
	 */
	public KTAProtocol stopVm(String vmId) throws Exception {
		StringBuilder buffer 		= new StringBuilder();
		buffer.append("command=stopVirtualMachine");
		buffer.append("&id=" + vmId);
		buffer.append("&response=json");
		
		String requestFullAddress 	= make(SERVER_URLADDR, buffer.toString());
		String deployJson 			= prettyPrinterForJson(getAPIInfo(requestFullAddress));
		
		return new KTAProtocol("stopVirtualMachine", buffer.toString(), requestFullAddress, deployJson);
	}
	
	/**
	 * VM 시작
	 * 
	 * @param vmId
	 * @return
	 * @throws Exception
	 */
	public KTAProtocol startVm(String vmId) throws Exception {
		StringBuilder buffer 		= new StringBuilder();
		buffer.append("command=startVirtualMachine");
		buffer.append("&id=" + vmId);
		buffer.append("&response=json");
		
		String requestFullAddress 	= make(SERVER_URLADDR, buffer.toString());
		String deployJson 			= prettyPrinterForJson(getAPIInfo(requestFullAddress));
		
		return new KTAProtocol("startVirtualMachine", buffer.toString(), requestFullAddress, deployJson);
	}
	
	/**
	 * VM을 삭제
	 * 
	 * @param vmId
	 * @return
	 * @throws Exception
	 */
	public KTAProtocol removeVm(String vmId) throws Exception {
		StringBuilder buffer 		= new StringBuilder();
		buffer.append("command=destroyVirtualMachine");
		buffer.append("&id=" + vmId);
		buffer.append("&response=json");
		
		String requestFullAddress 	= make(SERVER_URLADDR, buffer.toString());
		String deployJson 			= prettyPrinterForJson(getAPIInfo(requestFullAddress));
		
		return new KTAProtocol("destroyVirtualMachine", buffer.toString(), requestFullAddress, deployJson);
	}
	
	/**
	 * 템블릿 목록을 JSONObject 형태로 반환
	 * 
	 * @return
	 * @throws Exception
	 */
	public JSONObject listVmTemplate() throws Exception {
		String listTemplateJson 	= prettyPrinterForJson(getAPIInfo(make(SERVER_URLADDR, "command=listTemplates&templatefilter=selfexecutable&response=json"))); // self|selfexecutable : 차이점이 뭐지???
		return JSON.parseObject(listTemplateJson, JSONObject.class);
	}
	
	/**
	 * 서버에 구축된 모든 VM의 목록을 반환
	 * 
	 * {"memory":4096,"templatedisplaytext":"test-img-wms","securitygroup":[],"nic":[{"ipaddress":"172.16.0.67","broadcasturi":"vlan://2862","type":"Shared","isolationuri":"vlan://2862","netmask":"255.255.255.0","secondaryip":[],"networkname":"ent2_nipa_encgl_DMZ_tier1","networkid":"8cce3f82-35b7-470d-9845-32f1f745e55d","traffictype":"Guest","macaddress":"1e:00:27:03:16:42","id":"b27a1af9-6bde-4a18-9ea5-e70e38af139a","isdefault":true,"gateway":"172.16.0.1"}],"affinitygroup":[],"guestosid":"5c0e89a8-ff26-11e6-8781-1402ec8ff68c","userid":"d6de3af1-b990-463f-9193-dbbc91297530","domainid":"3a8ffbd4-ccd7-49e6-bbd6-2fba7a6c9cf8","passwordenabled":true,"hypervisor":"XenServer","serviceofferingname":"cpod 2core 4GB Instance. Virtual Networking","templatename":"test-img-wms","isdynamicallyscalable":false,"id":"1ab7f62e-1f8b-41bf-9444-8b0bf0c8e6d9","state":"Running","cpuspeed":2000,"created":"2020-11-13T16:08:34+0900","ostypeid":201,"rootdevicetype":"ROOT","templateid":"c74558cf-9a33-471c-9a6f-83d3038c27c0","zonename":"kr-md2-1","rootdeviceid":0,"tags":[],"serviceofferingid":"919c59cf-fe26-497c-b37c-c5edf4cb53f9","displayname":"corn-vm-testuser","domain":"ent2_nipa_encgl","haenable":true,"name":"corn-vm-testuser","zoneid":"d7d0177e-6cda-404a-a46f-a5b356d2874e","cpunumber":2,"account":"ent2_nipa_encgl_001","username":"ent2_nipa_encgl_001"}
	 * 
	 * @return
	 * @throws Exception
	 */
	public JSONArray getVmList() throws Exception {
		StringBuilder buffer 		= new StringBuilder();
		buffer.append("command=listVirtualMachines");
		buffer.append("&response=json");
		
		String requestFullAddress 	= make(SERVER_URLADDR, buffer.toString());
		String deployTxt 			= prettyPrinterForJson(getAPIInfo(requestFullAddress));
		if (deployTxt == null || deployTxt.length() <= 0) {
			return null;
		} else {
			JSONObject resJson 		= JSONObject.parseObject(deployTxt).getJSONObject("listvirtualmachinesresponse");
			if (resJson != null) {
				return resJson.getJSONArray("virtualmachine");
			} else return null;
		}
	}
	
	public static void main(String[] args) {
		VMManageExt app 	= new VMManageExt();
		try {
			JSONArray list 	= app.getVmList();
			String deployJson 			= app.prettyPrinterForJson(list.toJSONString());
			System.out.println(deployJson);
			
			
//			System.out.println("-----------------------정지");
//			KTAProtocol stopProtocol 	= app.stopVm("02f89ca2-26a2-4848-aa58-ffe901d00143");
//			//System.out.println(app.prettyPrinterForJson(stopProtocol.getResponseJson()));
//			System.out.println(stopProtocol.toString());
//			
			/*
			System.out.println("-----------------------시작");
			KTAProtocol startProtocol 	= app.startVm("02f89ca2-26a2-4848-aa58-ffe901d00143");
			System.out.println(app.prettyPrinterForJson(startProtocol.getResponseJson()));
			*/
			
			
//			System.out.println("-----------------------삭제");
//			KTAProtocol removeProtocol 	= app.removeVm("02f89ca2-26a2-4848-aa58-ffe901d00143");
//			//System.out.println(app.prettyPrinterForJson(removeProtocol.getResponseJson()));
//			System.out.println(removeProtocol.toString());
			
			System.out.println("-----------------------체크");
			KTAProtocol checkProtocol 	= app.getVmQueryAsyncJobResult("122ed443-0b0c-48d0-863f-099f15d2ab7b");
			System.out.println(app.prettyPrinterForJson(checkProtocol.getResponseJson()));
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
}
